/* tslint:disable */
/* eslint-disable */
/**
 * Atlas Planner Backend
 * Atlas Planner Backend by @zisan
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AssignResourcesRequest } from '../models';
import { CampaignDetailResponse } from '../models';
import { CampaignResponse } from '../models';
import { CreateCampaignRequest } from '../models';
import { HTTPValidationError } from '../models';
import { LoadCampaignRequest } from '../models';
import { MessageResponse } from '../models';
/**
 * CampaignManagementApi - axios parameter creator
 * @export
 */
export const CampaignManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign Resources
         * @param {AssignResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignResourcesV1CampaignsAssignResourcesPost: async (body: AssignResourcesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling assignResourcesV1CampaignsAssignResourcesPost.');
            }
            const localVarPath = `/v1/campaigns/assign_resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Campaign
         * @param {CreateCampaignRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignV1CampaignsCreatePost: async (body: CreateCampaignRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCampaignV1CampaignsCreatePost.');
            }
            const localVarPath = `/v1/campaigns/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Campaign
         * @param {string} campaignName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCampaignV1CampaignsCampaignNameDelete: async (campaignName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignName' is not null or undefined
            if (campaignName === null || campaignName === undefined) {
                throw new RequiredError('campaignName','Required parameter campaignName was null or undefined when calling deleteCampaignV1CampaignsCampaignNameDelete.');
            }
            const localVarPath = `/v1/campaigns/{campaign_name}`
                .replace(`{${"campaign_name"}}`, encodeURIComponent(String(campaignName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCampaignsV1CampaignsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/campaigns/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load Campaign
         * @param {LoadCampaignRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadCampaignV1CampaignsLoadPost: async (body: LoadCampaignRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loadCampaignV1CampaignsLoadPost.');
            }
            const localVarPath = `/v1/campaigns/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignManagementApi - functional programming interface
 * @export
 */
export const CampaignManagementApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Assign Resources
         * @param {AssignResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignResourcesV1CampaignsAssignResourcesPost(body: AssignResourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MessageResponse>>> {
            const localVarAxiosArgs = await CampaignManagementApiAxiosParamCreator(configuration).assignResourcesV1CampaignsAssignResourcesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Campaign
         * @param {CreateCampaignRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaignV1CampaignsCreatePost(body: CreateCampaignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignResponse>>> {
            const localVarAxiosArgs = await CampaignManagementApiAxiosParamCreator(configuration).createCampaignV1CampaignsCreatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Campaign
         * @param {string} campaignName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampaignV1CampaignsCampaignNameDelete(campaignName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MessageResponse>>> {
            const localVarAxiosArgs = await CampaignManagementApiAxiosParamCreator(configuration).deleteCampaignV1CampaignsCampaignNameDelete(campaignName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All Campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCampaignsV1CampaignsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CampaignResponse>>>> {
            const localVarAxiosArgs = await CampaignManagementApiAxiosParamCreator(configuration).getAllCampaignsV1CampaignsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Load Campaign
         * @param {LoadCampaignRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadCampaignV1CampaignsLoadPost(body: LoadCampaignRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDetailResponse>>> {
            const localVarAxiosArgs = await CampaignManagementApiAxiosParamCreator(configuration).loadCampaignV1CampaignsLoadPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CampaignManagementApi - factory interface
 * @export
 */
export const CampaignManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Assign Resources
         * @param {AssignResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignResourcesV1CampaignsAssignResourcesPost(body: AssignResourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<MessageResponse>> {
            return CampaignManagementApiFp(configuration).assignResourcesV1CampaignsAssignResourcesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Campaign
         * @param {CreateCampaignRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaignV1CampaignsCreatePost(body: CreateCampaignRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignResponse>> {
            return CampaignManagementApiFp(configuration).createCampaignV1CampaignsCreatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Campaign
         * @param {string} campaignName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCampaignV1CampaignsCampaignNameDelete(campaignName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MessageResponse>> {
            return CampaignManagementApiFp(configuration).deleteCampaignV1CampaignsCampaignNameDelete(campaignName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCampaignsV1CampaignsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CampaignResponse>>> {
            return CampaignManagementApiFp(configuration).getAllCampaignsV1CampaignsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load Campaign
         * @param {LoadCampaignRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadCampaignV1CampaignsLoadPost(body: LoadCampaignRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDetailResponse>> {
            return CampaignManagementApiFp(configuration).loadCampaignV1CampaignsLoadPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignManagementApi - object-oriented interface
 * @export
 * @class CampaignManagementApi
 * @extends {BaseAPI}
 */
export class CampaignManagementApi extends BaseAPI {
    /**
     * 
     * @summary Assign Resources
     * @param {AssignResourcesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public async assignResourcesV1CampaignsAssignResourcesPost(body: AssignResourcesRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<MessageResponse>> {
        return CampaignManagementApiFp(this.configuration).assignResourcesV1CampaignsAssignResourcesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create Campaign
     * @param {CreateCampaignRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public async createCampaignV1CampaignsCreatePost(body: CreateCampaignRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignResponse>> {
        return CampaignManagementApiFp(this.configuration).createCampaignV1CampaignsCreatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Campaign
     * @param {string} campaignName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public async deleteCampaignV1CampaignsCampaignNameDelete(campaignName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MessageResponse>> {
        return CampaignManagementApiFp(this.configuration).deleteCampaignV1CampaignsCampaignNameDelete(campaignName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get All Campaigns
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public async getAllCampaignsV1CampaignsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CampaignResponse>>> {
        return CampaignManagementApiFp(this.configuration).getAllCampaignsV1CampaignsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Load Campaign
     * @param {LoadCampaignRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public async loadCampaignV1CampaignsLoadPost(body: LoadCampaignRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDetailResponse>> {
        return CampaignManagementApiFp(this.configuration).loadCampaignV1CampaignsLoadPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
