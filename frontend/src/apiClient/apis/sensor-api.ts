/* tslint:disable */
/* eslint-disable */
/**
 * Atlas Planner Backend
 * Atlas Planner Backend by @zisan
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HTTPValidationError } from '../models';
import { SensorCreateRequest } from '../models';
import { SensorResponse } from '../models';
import { SensorUpdateRequest } from '../models';
/**
 * SensorApi - axios parameter creator
 * @export
 */
export const SensorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Sensor
         * @param {SensorCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSensorV1SensorPost: async (body: SensorCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSensorV1SensorPost.');
            }
            const localVarPath = `/v1/sensor/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") ||
              (localVarRequestOptions.headers && localVarRequestOptions.headers[
                "Content-Type"
              ] === "application/json");
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sensor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSensorV1SensorIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSensorV1SensorIdDelete.');
            }
            const localVarPath = `/v1/sensor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSensorsV1SensorGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sensor/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sensor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSensorV1SensorIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSensorV1SensorIdGet.');
            }
            const localVarPath = `/v1/sensor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Sensor
         * @param {SensorUpdateRequest} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSensorV1SensorIdPut: async (body: SensorUpdateRequest, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSensorV1SensorIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSensorV1SensorIdPut.');
            }
            const localVarPath = `/v1/sensor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") ||
              (localVarRequestOptions.headers && localVarRequestOptions.headers[
                "Content-Type"
              ] === "application/json");
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorApi - functional programming interface
 * @export
 */
export const SensorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Sensor
         * @param {SensorCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSensorV1SensorPost(body: SensorCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SensorResponse>>> {
            const localVarAxiosArgs = await SensorApiAxiosParamCreator(configuration).createSensorV1SensorPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Sensor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSensorV1SensorIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await SensorApiAxiosParamCreator(configuration).deleteSensorV1SensorIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All Sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSensorsV1SensorGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SensorResponse>>>> {
            const localVarAxiosArgs = await SensorApiAxiosParamCreator(configuration).getAllSensorsV1SensorGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Sensor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSensorV1SensorIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SensorResponse>>> {
            const localVarAxiosArgs = await SensorApiAxiosParamCreator(configuration).getSensorV1SensorIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Sensor
         * @param {SensorUpdateRequest} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSensorV1SensorIdPut(body: SensorUpdateRequest, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SensorResponse>>> {
            const localVarAxiosArgs = await SensorApiAxiosParamCreator(configuration).updateSensorV1SensorIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SensorApi - factory interface
 * @export
 */
export const SensorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Sensor
         * @param {SensorCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSensorV1SensorPost(body: SensorCreateRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<SensorResponse>> {
            return SensorApiFp(configuration).createSensorV1SensorPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Sensor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSensorV1SensorIdDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return SensorApiFp(configuration).deleteSensorV1SensorIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSensorsV1SensorGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SensorResponse>>> {
            return SensorApiFp(configuration).getAllSensorsV1SensorGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sensor
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSensorV1SensorIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SensorResponse>> {
            return SensorApiFp(configuration).getSensorV1SensorIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Sensor
         * @param {SensorUpdateRequest} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSensorV1SensorIdPut(body: SensorUpdateRequest, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SensorResponse>> {
            return SensorApiFp(configuration).updateSensorV1SensorIdPut(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SensorApi - object-oriented interface
 * @export
 * @class SensorApi
 * @extends {BaseAPI}
 */
export class SensorApi extends BaseAPI {
    /**
     * 
     * @summary Create Sensor
     * @param {SensorCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorApi
     */
    public async createSensorV1SensorPost(body: SensorCreateRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<SensorResponse>> {
        return SensorApiFp(this.configuration).createSensorV1SensorPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Sensor
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorApi
     */
    public async deleteSensorV1SensorIdDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return SensorApiFp(this.configuration).deleteSensorV1SensorIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get All Sensors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorApi
     */
    public async getAllSensorsV1SensorGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SensorResponse>>> {
        return SensorApiFp(this.configuration).getAllSensorsV1SensorGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Sensor
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorApi
     */
    public async getSensorV1SensorIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SensorResponse>> {
        return SensorApiFp(this.configuration).getSensorV1SensorIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Sensor
     * @param {SensorUpdateRequest} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorApi
     */
    public async updateSensorV1SensorIdPut(body: SensorUpdateRequest, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SensorResponse>> {
        return SensorApiFp(this.configuration).updateSensorV1SensorIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
