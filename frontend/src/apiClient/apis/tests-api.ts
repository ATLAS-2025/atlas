/* tslint:disable */
/* eslint-disable */
/**
 * Atlas Planner Backend
 * Atlas Planner Backend by @zisan
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CategoryCreateRequest } from '../models';
import { CategoryResponse } from '../models';
import { CategoryUpdateRequest } from '../models';
import { HTTPValidationError } from '../models';
import { ModuleTestsTestSchemaResponseTestResponse } from '../models';
import { TestCreateRequest } from '../models';
import { TestUpdateRequest } from '../models';
/**
 * TestsApi - axios parameter creator
 * @export
 */
export const TestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Category
         * @param {CategoryCreateRequest} body 
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategoryV1TestTestIdCategoriesPost: async (body: CategoryCreateRequest, testId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addCategoryV1TestTestIdCategoriesPost.');
            }
            // verify required parameter 'testId' is not null or undefined
            if (testId === null || testId === undefined) {
                throw new RequiredError('testId','Required parameter testId was null or undefined when calling addCategoryV1TestTestIdCategoriesPost.');
            }
            const localVarPath = `/v1/test/{test_id}/categories/`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Test
         * @param {TestCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestV1TestPost: async (body: TestCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTestV1TestPost.');
            }
            const localVarPath = `/v1/test/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryV1TestCategoriesCategoryIdDelete: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling deleteCategoryV1TestCategoriesCategoryIdDelete.');
            }
            const localVarPath = `/v1/test/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Test
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestV1TestIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTestV1TestIdDelete.');
            }
            const localVarPath = `/v1/test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategoriesV1TestCategoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/test/categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Tests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTestsV1TestGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/test/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Test
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestV1TestIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTestV1TestIdGet.');
            }
            const localVarPath = `/v1/test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Category
         * @param {CategoryUpdateRequest} body 
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryV1TestCategoriesCategoryIdPut: async (body: CategoryUpdateRequest, categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCategoryV1TestCategoriesCategoryIdPut.');
            }
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling updateCategoryV1TestCategoriesCategoryIdPut.');
            }
            const localVarPath = `/v1/test/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Test
         * @param {TestUpdateRequest} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestV1TestIdPut: async (body: TestUpdateRequest, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTestV1TestIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTestV1TestIdPut.');
            }
            const localVarPath = `/v1/test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestsApi - functional programming interface
 * @export
 */
export const TestsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Category
         * @param {CategoryCreateRequest} body 
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategoryV1TestTestIdCategoriesPost(body: CategoryCreateRequest, testId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CategoryResponse>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).addCategoryV1TestTestIdCategoriesPost(body, testId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Test
         * @param {TestCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestV1TestPost(body: TestCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).createTestV1TestPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryV1TestCategoriesCategoryIdDelete(categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).deleteCategoryV1TestCategoriesCategoryIdDelete(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete Test
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestV1TestIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).deleteTestV1TestIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategoriesV1TestCategoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CategoryResponse>>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).getAllCategoriesV1TestCategoriesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All Tests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTestsV1TestGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ModuleTestsTestSchemaResponseTestResponse>>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).getAllTestsV1TestGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Test
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestV1TestIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).getTestV1TestIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Category
         * @param {CategoryUpdateRequest} body 
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryV1TestCategoriesCategoryIdPut(body: CategoryUpdateRequest, categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CategoryResponse>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).updateCategoryV1TestCategoriesCategoryIdPut(body, categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update Test
         * @param {TestUpdateRequest} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTestV1TestIdPut(body: TestUpdateRequest, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>>> {
            const localVarAxiosArgs = await TestsApiAxiosParamCreator(configuration).updateTestV1TestIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TestsApi - factory interface
 * @export
 */
export const TestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add Category
         * @param {CategoryCreateRequest} body 
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategoryV1TestTestIdCategoriesPost(body: CategoryCreateRequest, testId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CategoryResponse>> {
            return TestsApiFp(configuration).addCategoryV1TestTestIdCategoriesPost(body, testId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Test
         * @param {TestCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestV1TestPost(body: TestCreateRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>> {
            return TestsApiFp(configuration).createTestV1TestPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Category
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryV1TestCategoriesCategoryIdDelete(categoryId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return TestsApiFp(configuration).deleteCategoryV1TestCategoriesCategoryIdDelete(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Test
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestV1TestIdDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return TestsApiFp(configuration).deleteTestV1TestIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategoriesV1TestCategoriesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CategoryResponse>>> {
            return TestsApiFp(configuration).getAllCategoriesV1TestCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Tests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTestsV1TestGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ModuleTestsTestSchemaResponseTestResponse>>> {
            return TestsApiFp(configuration).getAllTestsV1TestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Test
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestV1TestIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>> {
            return TestsApiFp(configuration).getTestV1TestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Category
         * @param {CategoryUpdateRequest} body 
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryV1TestCategoriesCategoryIdPut(body: CategoryUpdateRequest, categoryId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CategoryResponse>> {
            return TestsApiFp(configuration).updateCategoryV1TestCategoriesCategoryIdPut(body, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Test
         * @param {TestUpdateRequest} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTestV1TestIdPut(body: TestUpdateRequest, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>> {
            return TestsApiFp(configuration).updateTestV1TestIdPut(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestsApi - object-oriented interface
 * @export
 * @class TestsApi
 * @extends {BaseAPI}
 */
export class TestsApi extends BaseAPI {
    /**
     * 
     * @summary Add Category
     * @param {CategoryCreateRequest} body 
     * @param {number} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async addCategoryV1TestTestIdCategoriesPost(body: CategoryCreateRequest, testId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CategoryResponse>> {
        return TestsApiFp(this.configuration).addCategoryV1TestTestIdCategoriesPost(body, testId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create Test
     * @param {TestCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async createTestV1TestPost(body: TestCreateRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>> {
        return TestsApiFp(this.configuration).createTestV1TestPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Category
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async deleteCategoryV1TestCategoriesCategoryIdDelete(categoryId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return TestsApiFp(this.configuration).deleteCategoryV1TestCategoriesCategoryIdDelete(categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete Test
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async deleteTestV1TestIdDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return TestsApiFp(this.configuration).deleteTestV1TestIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get All Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async getAllCategoriesV1TestCategoriesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CategoryResponse>>> {
        return TestsApiFp(this.configuration).getAllCategoriesV1TestCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get All Tests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async getAllTestsV1TestGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ModuleTestsTestSchemaResponseTestResponse>>> {
        return TestsApiFp(this.configuration).getAllTestsV1TestGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Test
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async getTestV1TestIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>> {
        return TestsApiFp(this.configuration).getTestV1TestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Category
     * @param {CategoryUpdateRequest} body 
     * @param {number} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async updateCategoryV1TestCategoriesCategoryIdPut(body: CategoryUpdateRequest, categoryId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CategoryResponse>> {
        return TestsApiFp(this.configuration).updateCategoryV1TestCategoriesCategoryIdPut(body, categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update Test
     * @param {TestUpdateRequest} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestsApi
     */
    public async updateTestV1TestIdPut(body: TestUpdateRequest, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ModuleTestsTestSchemaResponseTestResponse>> {
        return TestsApiFp(this.configuration).updateTestV1TestIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
